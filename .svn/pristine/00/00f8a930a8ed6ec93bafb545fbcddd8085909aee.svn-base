//
//  ThinkerViewController.swift
//  Brainshots
//
//  Created by Amritpal Singh on 02/12/16.
//  Copyright Â© 2016 Anuradha Sharma. All rights reserved.
//

import UIKit
import AVFoundation

class ThinkerViewController: UIViewController,UITableViewDelegate,UITableViewDataSource {
    
    @IBOutlet weak var tableView: UITableView!
    var thinkArray = NSArray()
    
    var stepSoundPlayer: AVAudioPlayer?
    var burpSoundPlayer: AVAudioPlayer?
    var showAnimationImgView = UIImageView()
    
    override func viewDidLoad() {
        
        super.viewDidLoad()
        thinkArray = ["WATER","MILK","COFFEE","APPLE JUICE","LEMONADE","ICED TEA","SODA","GRAPE JUICE","FRUIT PUNCH","OTHER"]
        tableView.separatorColor = UIColor.clear
        
        bigSlurpSound()
        stepsInSound()
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 0.1) {
        
            self.addImageForAnimation()
        }
        
        // Do any additional setup after loading the view.
    }
    
    override func didReceiveMemoryWarning() {
        super.didReceiveMemoryWarning()
        // Dispose of any resources that can be recreated.
    }
    
    func tableView(_ tableView: UITableView, numberOfRowsInSection section: Int) -> Int {
        
        return thinkArray.count
    }
    
    func tableView(_ tableView: UITableView, cellForRowAt indexPath: IndexPath) -> UITableViewCell {
        
        let cellId = "Cell"
        let cell = tableView.dequeueReusableCell(withIdentifier: cellId, for: indexPath)
        let shotsName : String = "\(String(indexPath.row + 1)). \(String(describing: thinkArray.object(at: indexPath.row)))"
        
        cell.textLabel?.text = shotsName
        cell.textLabel?.font = UIFont.init(name: "FatFrank-Regular", size: 20);
        cell.textLabel?.textColor = UIColor.white
        
        let tapAction = UIButton()
        tapAction.frame = CGRect(x: 0, y: 3, width: 125, height: 30)
        cell.contentView.addSubview(tapAction)
        tapAction.tag = indexPath.row
        tapAction.addTarget(self, action: #selector(btnAction), for: .touchUpInside)
        tapAction.addTarget(self, action: #selector(touchDown), for: .touchDown)
        cell.selectionStyle = UITableViewCellSelectionStyle.none
        
        return cell
        
    }
    
    func btnAction(_sender:UIButton){
        
        showAnimation(index: _sender.tag)
    }
    
    func tableView(_ tableView: UITableView, heightForRowAt indexPath: IndexPath) -> CGFloat {
        
        return 50
    }
    
    func addImageForAnimation(){
    
        var imgSinker = UIImage()
        showAnimationImgView.frame = self.view.frame
        self.view.addSubview(showAnimationImgView)
        showAnimationImgView.isHidden = true

        var url = NSURL()
        var data = Data()
        url = Bundle.main.url(forResource: "Thinker_Small", withExtension: "gif")! as NSURL
        
        do {
            data = try Data.init(contentsOf: url as URL)
        } catch {
            print(error)
        }
        
        imgSinker = UIImage.animatedImage(withAnimatedGIFData:data)!
        showAnimationImgView.animationImages = imgSinker.images
        showAnimationImgView.animationDuration = imgSinker.duration
        showAnimationImgView.animationRepeatCount = 1
        showAnimationImgView.image = imgSinker.images?.last
    
    }
    
    func showAnimation(index:NSInteger) {
        
        self.view.isUserInteractionEnabled = false
        showAnimationImgView.isHidden = false
        showAnimationImgView.startAnimating()
        
        perform(#selector(stepsSound), with: nil, afterDelay: 0.1)
        perform(#selector(slurpSound), with: nil, afterDelay: 0.2)
        
        DispatchQueue.main.asyncAfter(deadline: .now() + 2.1) {
            
            let text = "\(self.thinkArray.object(at: index))"
            let popUp = PopupView.init(frame: CGRect(x: 60, y: self.view.frame.size.height - 120, width: self.view.frame.size.width - 120, height: 100))
            popUp.setLabel(text: "Your Shot is \n \(text.capitalized)")
            popUp.setTransitionToController(target:self)
            
            /*Block to hide animation*/
            DispatchQueue.main.asyncAfter(deadline: .now() + 1.0){
                
                self.showAnimationImgView.removeFromSuperview()
                self.addImageForAnimation()
                popUp.removeFromSuperview()
            }

            self.view.isUserInteractionEnabled = true
        }
    }
    
    /*Play steps sound*/
    func stepsSound() {
    
        stepSoundPlayer?.prepareToPlay()
        stepSoundPlayer?.play()
    }
    
    /*Play slurp sound*/
    func slurpSound(){
    
        burpSoundPlayer?.prepareToPlay()
        burpSoundPlayer?.play()
    }

    /*Add bigSlurp Sound*/
    func bigSlurpSound() {
        
        let url = Bundle.main.url(forResource: "BIG SLURP", withExtension: "wav")!
        
        do {
            burpSoundPlayer = try AVAudioPlayer(contentsOf: url)
            guard let burpSoundPlayer = burpSoundPlayer else { return }
            burpSoundPlayer.setVolume(UserDefaults.standard.float(forKey: "musicVolume"), fadeDuration: 0)
        } catch let error {
            print(error.localizedDescription)
        }
    }
    
    /*Add Stepsin Sound*/
    func stepsInSound(){
    
        let url = Bundle.main.url(forResource: "CHARACTER STEPS IN", withExtension: "wav")!
        
        do {
            stepSoundPlayer = try AVAudioPlayer(contentsOf: url)
            guard let stepSoundPlayer = stepSoundPlayer else { return }
            stepSoundPlayer.setVolume(UserDefaults.standard.float(forKey: "musicVolume"), fadeDuration: 0)
            
        } catch let error {
            print(error.localizedDescription)
        }
    }
    
    /*Back Button Action*/
    @IBAction func btnBack(_ sender: AnyObject) {
        
        _ = self.navigationController?.popViewController(animated: true)
    }
    
    //MARK:- TouchDown Actions Sound
    @IBAction func touchDown(_ sender: AnyObject) {
        CommonFunctions.sharedInstance.buttonPressedSound()
    }
}
